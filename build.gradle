plugins {
    id 'java'
    id 'jacoco'
    id "me.champeau.jmh" version "0.7.2"
}

group = 'org.example'
version = '1.0-SNAPSHOT'
java {
    sourceCompatibility = JavaVersion.VERSION_17  // Remplacez '11' par la version de Java que vous utilisez
    targetCompatibility = JavaVersion.VERSION_17  // Remplacez '11' par la version de Java que vous utilisez
}
compileJava.options.encoding = 'UTF-8'  // Définir l'encodage

repositories {
    gradlePluginPortal()
    mavenCentral()
}
compileJava.options.encoding = 'UTF-8'
dependencies {

    jmh 'commons-io:commons-io:2.16.1'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.0'
    implementation 'org.slf4j:slf4j-api:2.0.12'

    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'

    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.2'
    implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.5'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.11.0-M1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
        testImplementation 'org.assertj:assertj-core:3.26.0'


    implementation 'org.openjdk.jmh:jmh-core:1.37'
    annotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.37'
}

tasks.named('test') {
    useJUnitPlatform()
    // Variables pour compter le nombre de tests réussis et échoués
    int passedTests = 0
    int failedTests = 0

    // Enregistrer les résultats des tests individuels
    afterTest { descriptor, result ->
        if (result.resultType == TestResult.ResultType.SUCCESS) {
            passedTests++
        } else if (result.resultType == TestResult.ResultType.FAILURE) {
            failedTests++
        }
    }

    // Afficher le nombre total de tests réussis et échoués
    afterSuite { suite, result ->
        if (!suite.parent) { // root suite
            println("Nombre de tests reussis (OK): " + passedTests)
            println("Nombre de tests echoues (KO): " + failedTests)
        }
    }
}
jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    dependsOn test
}
jmhCompileGeneratedClasses {
    includes = ['ChercheurDeMot*']
}
//build.dependsOn jmh
